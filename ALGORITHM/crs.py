# -*- coding: utf-8 -*-
"""crs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Glqysc8xTB-_Woe0_Cusn3SJDGifm1x9
"""

import pandas as pd
import neattext.functions as nfx

pip install neattext

from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity,linear_kernel

df = pd.read_csv('Udemy_courses.csv')
df.head()

df['Title']

dir(nfx)

# Clean Text:stopwords,special charac
df['Title'] = df['Title'].apply(nfx.remove_stopwords)

# Clean Text:stopwords,special charac
df['Title'] = df['Title'].apply(nfx.remove_special_characters)

df[['Title','Title']]

# Vectorize our Text
count_vect = CountVectorizer()
cv_mat = count_vect.fit_transform(df['Title'])

# Sparse
cv_mat

# Dense
cv_mat.todense()

df_cv_words = pd.DataFrame(cv_mat.todense(),columns=count_vect.get_feature_names())

df_cv_words.head()

# Cosine Similarity Matrix
cosine_sim_mat = cosine_similarity(cv_mat)

cosine_sim_mat

#import seaborn as sns
#sns.heatmap(cosine_sim_mat[0:10],annot=True)

df.head()

# Get Course ID/Index
course_indices = pd.Series(df.index,index=df['Title']).drop_duplicates()

course_indices

course_indices['Type Safe Interfaces Modern CPlusPlus']

idx = course_indices['Type Safe Interfaces Modern CPlusPlus']
idx

scores = list(enumerate(cosine_sim_mat[idx]))
scores

# Sort our scores per cosine score
sorted_scores = sorted(scores,key=lambda x:x[1],reverse=True)

# Omit the First Value/itself
sorted_scores[1:]

# Selected Courses Indices
selected_course_indices = [i[0] for i in sorted_scores[1:]]

selected_course_indices

# Selected Courses Scores
selected_course_scores = [i[1] for i in sorted_scores[1:]]

recommended_result = df['Title'].iloc[selected_course_indices]
rec_df = pd.DataFrame(recommended_result)

rec_df.head()

rec_df['similarity_scores'] = selected_course_scores
rec_df

def recommend_course(title,num_of_rec=10):
    # ID for title
    idx = course_indices[title]
    # Course Indice
    # Search inside cosine_sim_mat
    scores = list(enumerate(cosine_sim_mat[idx]))
    # Scores
    # Sort Scores
    sorted_scores = sorted(scores,key=lambda x:x[1],reverse=True)
    # Recomm
    selected_course_indices = [i[0] for i in sorted_scores[1:]]
    selected_course_scores = [i[1] for i in sorted_scores[1:]]
    result = df['Title'].iloc[selected_course_indices]
    rec_df = pd.DataFrame(result)
    rec_df['similarity_scores'] = selected_course_scores
    return rec_df.head(num_of_rec)

recommend_course('Learn Modern CPlusPlus',8)

df.to_csv("Udemy_courses_clean.csv")